///Copyright (c) 2021, https://github.com/Larii75 Linchenko Andrii
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 Linchenko Andrii All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Область ИзмерениеСтроки

// Функция - Измерение строки
//
// Параметры:
//  СтрокаСимволов			 - 	 - 
//  ШрифтИмя				 - 	 - 
//  ШрифтРазмер				 - 	 - 
//  ШрифтЖирный				 - 	 - 
//  ШрифтЗачеркивание		 - 	 - 
//  ШрифтНаклонный			 - 	 - 
//  ШрифтПодчеркивание		 - 	 - 
//  РезультатВМиллиметрах	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ИзмерениеСтроки(ЗНАЧ СтрокаСимволов, ЗНАЧ Шрифт, РезультатВМиллиметрах=Ложь) Экспорт
	
	Перем Результат;
	Перем КодВозврата;
	СтрокаСтиля = "";
	СтрокаСимволов = СтрЗаменить(СтрокаСимволов, "'", "''");	
	ШрифтИмя = Шрифт.Имя; 
	ШрифтРазмер = Шрифт.Размер; 
	ШрифтЖирный = Шрифт.Жирный;
	ШрифтЗачеркивание = Шрифт.Зачеркивание; 
	ШрифтНаклонный = Шрифт.Наклонный; 
	ШрифтПодчеркивание = Шрифт.Подчеркивание;
	
	Если ШрифтЖирный = Неопределено Тогда
		ШрифтЖирный = Ложь;
	КонецЕсли;
	Если ШрифтЗачеркивание = Неопределено Тогда
		ШрифтЗачеркивание = Ложь;
	КонецЕсли;
	Если ШрифтНаклонный = Неопределено Тогда
		ШрифтНаклонный = Ложь;
	КонецЕсли;
	Если ШрифтПодчеркивание = Неопределено Тогда
		ШрифтПодчеркивание = Ложь;
	КонецЕсли;

	ИмяВременногоСкрипта = ПолучитьИмяВременногоФайла(".ps1");
	ИмяВременногоЛога = ПолучитьИмяВременногоФайла(".log");
	ИмяВременногоПакета = ПолучитьИмяВременногоФайла(".bat");
	
	///Создаем лог сразу.	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоЛога, "UTF-8");
	ЗаписьТекста.Записать("");
	ЗаписьТекста.Закрыть();

	Если ШрифтИмя = "" Тогда
		ШрифтИмя = "MS Shell Dlg";
	КонецЕсли;
	Если ШрифтРазмер = -1 Тогда
		ШрифтРазмер = 8;
	КонецЕсли;
	Если ШрифтЖирный Тогда
		СтрокаСтиля = "Bold";
	КонецЕсли;
	Если ШрифтНаклонный Тогда
		СтрокаСтиля = СтрокаСтиля + ?(СтрокаСтиля="", "", ", ") + "Italic";
	КонецЕсли;
	Если ШрифтПодчеркивание Тогда
		СтрокаСтиля = СтрокаСтиля + ?(СтрокаСтиля="", "", ", ") + "Underline";
	КонецЕсли;
	Если ШрифтЗачеркивание Тогда
		СтрокаСтиля = СтрокаСтиля + ?(СтрокаСтиля="", "", ", ") + "StrikeOut";
	КонецЕсли;
	Если СтрокаСтиля = "" Тогда
		СтрокаСтиля = "Regular";
	КонецЕсли;
	ШрифтСтиль = СтрокаСтиля;
	СтрокаКоманды = ("chcp 65001" + Символы.ПС + "powershell -executionpolicy RemoteSigned -WindowStyle Hidden -file " + ИмяВременногоСкрипта + " " + ШрифтРазмер + " """ + ШрифтИмя + """ """ + ШрифтСтиль + """ >>" + ИмяВременногоЛога + " 2>&1");
	ЗаписьДанныхПакет = Новый ЗаписьДанных(ИмяВременногоПакета, "UTF-8");
	ЗаписьДанныхПакет.ЗаписатьСтроку(СтрокаКоманды );
	ЗаписьДанныхПакет.Закрыть();
	
	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток, "windows-1251"); ///Проблемы с ISE
	ЗаписьДанных.ЗаписатьСтроку("param ($fontSize, $fontName, $fontStyle)");
	///Слишком сложное экранирование для СтрокаСимволов. Сразу вставляем в скрипт.
	ЗаписьДанных.ЗаписатьСтроку("$string = '" + СтрокаСимволов + "'");
	ЗаписьДанных.ЗаписатьСтроку("[Console]::InputEncoding = [System.Text.Encoding]::GetEncoding(""UTF-8"")");
	ЗаписьДанных.ЗаписатьСтроку("[Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding(""UTF-8"")");
	ЗаписьДанных.ЗаписатьСтроку("[void][reflection.assembly]::loadwithpartialname(""system.drawing"")");
	ЗаписьДанных.ЗаписатьСтроку("[void][reflection.assembly]::loadwithpartialname(""system.windows.forms"")");
	ЗаписьДанных.ЗаписатьСтроку("$font = New-Object System.Drawing.Font($fontName, $fontSize, [System.Drawing.FontStyle]$fontStyle)");
	ЗаписьДанных.ЗаписатьСтроку("$size = [System.Windows.Forms.TextRenderer]::MeasureText($string, $font)");
	ЗаписьДанных.ЗаписатьСтроку("$size.Width");
	ЗаписьДанных.Закрыть();
	ДвоичныеДанные2 = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	ДвоичныеДанные2.Записать(ИмяВременногоСкрипта);
	ЗапуститьПриложение(ИмяВременногоПакета,, Истина, КодВозврата);
	ЧтениеДанных = Новый ЧтениеДанных(ИмяВременногоЛога, "UTF-8");
	СтрокаВозврата = ЧтениеДанных.ПрочитатьСимволы();
	ЧтениеДанных.Закрыть();
	УдалитьФайлы(ИмяВременногоСкрипта);
	УдалитьФайлы(ИмяВременногоЛога);
	УдалитьФайлы(ИмяВременногоПакета);
	Если НЕ КодВозврата = 0 Тогда
		Возврат "Неизвестная ошибка, код " + КодВозврата;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаВозврата) Тогда
		Попытка
			Результат = Число(СокрЛП(СтрЗаменить(СтрокаВозврата, Символ(65279), "")));
			Если РезультатВМиллиметрах Тогда
				Результат = Результат * 0.264583333333334;
			КонецЕсли;
		Исключение
		    Результат = СтрокаВозврата;
		КонецПопытки;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПереносСлов

// Функция - Получить карту замены
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьКартуЗамены() Экспорт
	
	//x=йьъї
	КартаЗамены = Новый Соответствие;
	КартаЗамены.Вставить("й", "x");
	КартаЗамены.Вставить("ь", "x");
	КартаЗамены.Вставить("ъ", "x");
	КартаЗамены.Вставить("ї", "x");
	
	//g=аеёиоуыэюяaeiouyіє	
	КартаЗамены.Вставить("а", "g");
	КартаЗамены.Вставить("е", "g");
	КартаЗамены.Вставить("ё", "g");
	КартаЗамены.Вставить("и", "g");
	КартаЗамены.Вставить("о", "g");
	КартаЗамены.Вставить("у", "g");
	КартаЗамены.Вставить("ы", "g");
	КартаЗамены.Вставить("э", "g");
	КартаЗамены.Вставить("ю", "g");
	КартаЗамены.Вставить("я", "g");
	КартаЗамены.Вставить("a", "g");
	КартаЗамены.Вставить("e", "g");
	КартаЗамены.Вставить("i", "g");
	КартаЗамены.Вставить("o", "g");
	КартаЗамены.Вставить("u", "g");
	КартаЗамены.Вставить("y", "g");
	КартаЗамены.Вставить("і", "g");
	КартаЗамены.Вставить("є", "g");
	
	//s=бвгджзклмнпрстфхцчшщbcdfghjklmnpqrstvwxzґ
	КартаЗамены.Вставить("б", "s");
	КартаЗамены.Вставить("в", "s");
	КартаЗамены.Вставить("г", "s");
	КартаЗамены.Вставить("д", "s");
	КартаЗамены.Вставить("ж", "s");
	КартаЗамены.Вставить("з", "s");
	КартаЗамены.Вставить("к", "s");
	КартаЗамены.Вставить("л", "s");
	КартаЗамены.Вставить("м", "s");
	КартаЗамены.Вставить("н", "s");
	КартаЗамены.Вставить("п", "s");
	КартаЗамены.Вставить("р", "s");
	КартаЗамены.Вставить("с", "s");
	КартаЗамены.Вставить("т", "s");
	КартаЗамены.Вставить("ф", "s");
	КартаЗамены.Вставить("х", "s");
	КартаЗамены.Вставить("ц", "s");
	КартаЗамены.Вставить("ч", "s");
	КартаЗамены.Вставить("ш", "s");
	КартаЗамены.Вставить("щ", "s");
	КартаЗамены.Вставить("b", "s");
	КартаЗамены.Вставить("c", "s");
	КартаЗамены.Вставить("d", "s");
	КартаЗамены.Вставить("f", "s");
	КартаЗамены.Вставить("g", "s");
	КартаЗамены.Вставить("h", "s");
	КартаЗамены.Вставить("j", "s");
	КартаЗамены.Вставить("k", "s");
	КартаЗамены.Вставить("l", "s");
	КартаЗамены.Вставить("m", "s");
	КартаЗамены.Вставить("n", "s");
	КартаЗамены.Вставить("p", "s");
	КартаЗамены.Вставить("q", "s");
	КартаЗамены.Вставить("r", "s");
	КартаЗамены.Вставить("s", "s");
	КартаЗамены.Вставить("t", "s");
	КартаЗамены.Вставить("v", "s");
	КартаЗамены.Вставить("w", "s");
	КартаЗамены.Вставить("x", "s");
	КартаЗамены.Вставить("z", "s");
	КартаЗамены.Вставить("ґ", "s");
	
	Возврат КартаЗамены;

КонецФункции

// Функция - Получить карту правил переноса
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьКартуПравилПереноса() Экспорт
	
	СимволМягкогоПереноса = Символ(173);
	КартаПравилПереноса = Новый Соответствие;
	КартаПравилПереноса.Вставить("xgg", "x" + СимволМягкогоПереноса + "gg");
	КартаПравилПереноса.Вставить("xgs", "x" + СимволМягкогоПереноса + "gs");
	КартаПравилПереноса.Вставить("xsg", "x" + СимволМягкогоПереноса + "sg");
	КартаПравилПереноса.Вставить("xss", "x" + СимволМягкогоПереноса + "ss");
	КартаПравилПереноса.Вставить("sgsg", "sg" + СимволМягкогоПереноса + "sg");
	КартаПравилПереноса.Вставить("gssg", "gs" + СимволМягкогоПереноса + "sg"); //Этот работает странно. Проверка на слове "Непростой"
	КартаПравилПереноса.Вставить("sggg", "sg" + СимволМягкогоПереноса + "gg");
	КартаПравилПереноса.Вставить("sggs", "sg" + СимволМягкогоПереноса + "gs");
	КартаПравилПереноса.Вставить("gsssg", "gss" + СимволМягкогоПереноса + "sg");
	КартаПравилПереноса.Вставить("gsssg", "gs" + СимволМягкогоПереноса + "ssg");
	КартаПравилПереноса.Вставить("gssssg", "gss" + СимволМягкогоПереноса + "ssg");

	Возврат КартаПравилПереноса;
	
КонецФункции

// Функция - Получить строку с переносами и массив позиций переноса
//
// Параметры:
//  СтрокаСимволовОригинал	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьСтрокуСПереносамиИМассивПозицийПереноса(ЗНАЧ СтрокаСимволовОригинал) Экспорт
	
	СтрокаСимволов = НРЕГ(СтрокаСимволовОригинал);
	СимволМягкогоПереноса = Символ(173);
	Результат = Новый Структура("СтрокаСЗаменамиСПереносами, МассивПозицийПереносовПоСтроке, СтрокаСПереносами");
	МассивСимволов = Новый Массив;
	МассивСимволовЗамены = Новый Массив;
	МассивПозицийПереносов = Новый Массив;
	МассивПозицийПереносовПоСтроке = Новый Массив;
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		СимволЗамены = ПолучитьКартуЗамены()[Сред(СтрокаСимволов, Индекс, 1)];
		Если СимволЗамены = Неопределено Тогда
			СимволЗамены = Сред(СтрокаСимволов, Индекс, 1); 
		КонецЕсли;
		МассивСимволовЗамены.Добавить(СимволЗамены);
		МассивСимволов.Добавить(Сред(СтрокаСимволовОригинал, Индекс, 1));
	КонецЦикла;
	
	СтрокаСЗаменамиСПереносами = СтрСоединить(МассивСимволовЗамены);
	
	Для Каждого КлючИЗначение Из ПолучитьКартуПравилПереноса() Цикл
		СтрокаСЗаменамиСПереносами = СтрЗаменить(СтрокаСЗаменамиСПереносами, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НачальнаяПозиция = 1;
	Пока НачальнаяПозиция < СтрДлина(СтрокаСЗаменамиСПереносами) Цикл
		РезультатПоиска = СтрНайти(СтрокаСЗаменамиСПереносами, СимволМягкогоПереноса, ,НачальнаяПозиция);
		Если НЕ РезультатПоиска = 0 Тогда
			///Блок сложных корректировок правил.
			Если Сред(СтрокаСЗаменамиСПереносами, РезультатПоиска-3, 8) = "sgs" + СимволМягкогоПереноса + "sgss" Тогда
				СтрокаСЗаменамиСПереносами = Сред(СтрокаСЗаменамиСПереносами, 1, РезультатПоиска-1) + "sg" + СимволМягкогоПереноса + Сред(СтрокаСЗаменамиСПереносами, РезультатПоиска+3);
				РезультатПоиска = РезультатПоиска + 2;
			КонецЕсли;
			МассивПозицийПереносовПоСтроке.Добавить(РезультатПоиска - МассивПозицийПереносов.Количество());
			МассивПозицийПереносов.Добавить(РезультатПоиска - 1);
			НачальнаяПозиция = РезультатПоиска + 1;
		Иначе
			НачальнаяПозиция = СтрДлина(СтрокаСЗаменамиСПереносами) + 1;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Перенос Из МассивПозицийПереносов Цикл
		МассивСимволов.Вставить(Перенос, СимволМягкогоПереноса);
	КонецЦикла;
	///Заменяем пробелы и дефис на мягкий перенос.
	ИндексМассиваСимволов = -1;
	Для Каждого ЭлементМассиваСимволов Из МассивСимволов Цикл
		ИндексМассиваСимволов = ИндексМассиваСимволов + 1;
		Если ЭлементМассиваСимволов = " " ИЛИ  ЭлементМассиваСимволов = "-" Тогда 
			МассивСимволов[ИндексМассиваСимволов] = СимволМягкогоПереноса;
			МассивПозицийПереносов.Добавить(ИндексМассиваСимволов);
		КонецЕсли;
	КонецЦикла;
	///Заменяем пробелы и дефис в оригинальной строке
	Для ПозицияОригинальногоСимвола = 1 По СтрДлина(СтрокаСимволовОригинал) Цикл
		Если Сред(СтрокаСимволовОригинал, ПозицияОригинальногоСимвола, 1) = " " ИЛИ Сред(СтрокаСимволовОригинал, ПозицияОригинальногоСимвола, 1) = "-" Тогда
			МассивПозицийПереносовПоСтроке.Добавить(ПозицияОригинальногоСимвола);	
		КонецЕсли;
	КонецЦикла;	
		
	СписокСортировки = Новый СписокЗначений;
	СписокСортировки.ЗагрузитьЗначения(МассивПозицийПереносовПоСтроке);
	СписокСортировки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	МассивПозицийПереносовПоСтроке = СписокСортировки.ВыгрузитьЗначения();
		
	СтрокаСЗаменамиСПереносами = СтрЗаменить(СтрЗаменить(СтрокаСЗаменамиСПереносами, " ", СимволМягкогоПереноса), "-", СимволМягкогоПереноса);
	СтрокаСПереносами = СтрСоединить(МассивСимволов);

	Результат.МассивПозицийПереносовПоСтроке = МассивПозицийПереносовПоСтроке;
	Результат.СтрокаСЗаменамиСПереносами = СтрокаСЗаменамиСПереносами;
	Результат.СтрокаСПереносами = СтрокаСПереносами;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получить массив строк по ширине блока с переносами
//
// Параметры:
//  СтрокаСимволов	 - 	 - 
//  Шрифт			 - 	 - 
//  ШиринаБлокаММ	 - 	 - 
//  ВысотаБлокаММ	 - 	 - 
//  WordWrap		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьМассивСтрокПоШиринеБлокаСПереносами(ЗНАЧ СтрокаСимволов, ЗНАЧ Шрифт, ЗНАЧ ШиринаБлокаММ, ЗНАЧ ВысотаБлокаММ, WordWrap=Ложь, МежстрочныйИнтервал=1.15) Экспорт
	
	Результат = Новый Массив;
	МассивСтроки = Новый Массив;
	Для НомерСимвола = 1 По СтрДлина(СтрокаСимволов) Цикл
		МассивСтроки.Добавить(Сред(СтрокаСимволов, НомерСимвола, 1));	
	КонецЦикла;
	КартаТекущихПереносов = Новый Соответствие;
	ШрифтИмя = Шрифт.Имя; 
	ШрифтРазмер = Шрифт.Размер;	
	ШрифтЖирный = Шрифт.Жирный;
	ШрифтЗачеркивание = Шрифт.Зачеркивание; 
	ШрифтНаклонный = Шрифт.Наклонный; 
	ШрифтПодчеркивание = Шрифт.Подчеркивание;
	
	Если ШрифтЖирный = Неопределено Тогда
		ШрифтЖирный = Ложь;
	КонецЕсли;
	Если ШрифтЗачеркивание = Неопределено Тогда
		ШрифтЗачеркивание = Ложь;
	КонецЕсли;
	Если ШрифтНаклонный = Неопределено Тогда
		ШрифтНаклонный = Ложь;
	КонецЕсли;
	Если ШрифтПодчеркивание = Неопределено Тогда
		ШрифтПодчеркивание = Ложь;
	КонецЕсли;
	Если ШрифтИмя = "" Тогда
		ШрифтИмя = "MS Shell Dlg";
	КонецЕсли;
	Если ШрифтРазмер = -1 Тогда
		ШрифтРазмер = 8;
	КонецЕсли;
	///т.е. для 14 шрифта 1.15 * (14 * 0.3527) = 5.67847 mm
	РазмерВсейСтроки = ИзмерениеСтроки(СтрокаСимволов, Шрифт, Истина);
	ДанныеПереносов = ПолучитьСтрокуСПереносамиИМассивПозицийПереноса(СтрокаСимволов);
	Если ТипЗнч(ДанныеПереносов) = Тип("Структура") Тогда
		Переносы = ДанныеПереносов.МассивПозицийПереносовПоСтроке;
		Если ТипЗнч(Переносы) = Тип("Массив") Тогда
			Если ТипЗнч(РазмерВсейСтроки) = Тип("Число") Тогда
				СредняяШиринаСимволаСтроки = РазмерВсейСтроки / СтрДлина(СтрокаСимволов);
				СкорректированноеПоВысотеКоличествоСтрок = Окр(ВысотаБлокаММ / (МежстрочныйИнтервал * (ШрифтРазмер * 0.3527)), 0, РежимОкругления.Окр15как20);
				КоличествоСимволовПервойСтрокиПредв = Окр(ШиринаБлокаММ / СредняяШиринаСимволаСтроки, 0, РежимОкругления.Окр15как20);
				
				НомерПервогоСимвола = 1;
				Пока НЕ НомерПервогоСимвола = -1 Цикл
					ОбрабатываемаяСтрока = Сред(СтрокаСимволов, НомерПервогоСимвола, КоличествоСимволовПервойСтрокиПредв);
					Если КоличествоСимволовПервойСтрокиПредв > СтрДлина(ОбрабатываемаяСтрока) Тогда
						ФлагКороткойСтроки = Истина;
					Иначе
						ФлагКороткойСтроки = Ложь;
					КонецЕсли;
					КоличествоСимволовПервойСтрокиПредв = Мин(КоличествоСимволовПервойСтрокиПредв, СтрДлина(ОбрабатываемаяСтрока));
					Если ОбрабатываемаяСтрока = "" Тогда
						Прервать;
					КонецЕсли;
					Если НЕ WordWrap Тогда
						ПроверкаПервойСтроки = ИзмерениеСтроки(ОбрабатываемаяСтрока, Шрифт, Истина);
					Иначе
						///Мы не подгоняем строки, это черновой, но быстрый перенос.
						ПроверкаПервойСтроки = ШиринаБлокаММ;
					КонецЕсли;
					Если ТипЗнч(ПроверкаПервойСтроки) = Тип("Число") Тогда
						Если НЕ ФлагКороткойСтроки Тогда
							КорректировкаПоСимволам = Окр((ШиринаБлокаММ - ПроверкаПервойСтроки) / СредняяШиринаСимволаСтроки, 0, РежимОкругления.Окр15как20);
							Если НЕ КорректировкаПоСимволам = 0 Тогда
								КоличествоСимволовПервойСтрокиПредв = КоличествоСимволовПервойСтрокиПредв + КорректировкаПоСимволам;
							КонецЕсли;
							ПоследнийСимволСтроки = НомерПервогоСимвола + КоличествоСимволовПервойСтрокиПредв;
							Если Переносы.Количество() Тогда
								Для Индекс = -Переносы.ВГраница() По 0 Цикл
									Если Переносы[-Индекс] > ПоследнийСимволСтроки Тогда
										Продолжить;
									Иначе
										Если НЕ КартаТекущихПереносов[Переносы[-Индекс]] = Неопределено Тогда
											///Мы зациклились...
											Результат.Добавить(Сред(СтрокаСимволов, НомерПервогоСимвола));
											НомерПервогоСимвола = -1;
											Прервать;
										Иначе
											Результат.Добавить(Сред(СтрокаСимволов, НомерПервогоСимвола, (Переносы[-Индекс] - НомерПервогоСимвола)));
											КартаТекущихПереносов.Вставить(Переносы[-Индекс],-Индекс);
											НомерПервогоСимвола = Переносы[-Индекс];
											Если КартаТекущихПереносов.Количество() = СкорректированноеПоВысотеКоличествоСтрок Тогда
												НомерПервогоСимвола = -1;
											КонецЕсли;
											Прервать;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
							Иначе
								Результат.Добавить(Сред(СтрокаСимволов, НомерПервогоСимвола));
								НомерПервогоСимвола = -1;
							КонецЕсли;
						Иначе
							Результат.Добавить(Сред(СтрокаСимволов, НомерПервогоСимвола));
							НомерПервогоСимвола = -1;
						КонецЕсли;
					Иначе
						Если ПустаяСтрока(ПроверкаПервойСтроки) Тогда
							ПроверкаПервойСтроки = "Неэкранированные спецсимволы в строке.
							|Сбой передачи параметров."
						КонецЕсли;
						ВызватьИсключение(ПроверкаПервойСтроки);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ПустаяСтрока(РазмерВсейСтроки) Тогда
					РазмерВсейСтроки = "Неэкранированные спецсимволы в строке.
					|Сбой передачи параметров."
				КонецЕсли;
				ВызватьИсключение(РазмерВсейСтроки);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для ИндексЭлементаМассиваРезультат = 0 По Результат.ВГраница() Цикл
		Результат[ИндексЭлементаМассиваРезультат] = СокрЛ(Результат[ИндексЭлементаМассиваРезультат]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	
	
#КонецОбласти